{"ast":null,"code":"import _slicedToArray from \"/Users/danielhuang/Desktop/front-end/omou-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _objectSpread from \"/Users/danielhuang/Desktop/front-end/omou-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nvar _jsxFileName = \"/Users/danielhuang/Desktop/front-end/omou-frontend/src/components/Form/Form.js\";\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\nimport * as registrationActions from '../../actions/registrationActions';\nimport PropTypes from 'prop-types';\nimport React, { Component } from 'react';\nimport TableRow from \"@material-ui/core/TableRow\";\nimport { Prompt } from 'react-router'; //Material UI Imports\n\nimport Grid from \"@material-ui/core/Grid\";\nimport Button from \"@material-ui/core/Button\";\nimport Paper from \"@material-ui/core/Paper\";\nimport { Typography } from \"@material-ui/core\";\nimport Stepper from \"@material-ui/core/Stepper\";\nimport Step from \"@material-ui/core/Step\";\nimport StepLabel from \"@material-ui/core/StepLabel\";\nimport StepContent from \"@material-ui/core/StepContent\";\nimport TextField from \"@material-ui/core/TextField\";\nimport { InputValidation } from \"../FeatureViews/Registration/Validations\";\nimport Select from \"@material-ui/core/Select\";\nimport InputLabel from \"@material-ui/core/InputLabel\";\nimport FormControl from \"@material-ui/core/FormControl\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport Fab from \"@material-ui/core/Fab\";\nimport AddIcon from \"@material-ui/icons/Add\";\nimport RemoveIcon from \"@material-ui/icons/Clear\"; //Outside React Component\n\nimport SearchSelect from 'react-select';\nimport BackButton from \"../BackButton.js\";\n\nclass Form extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      conditional: \"\",\n      nextSection: false,\n      activeStep: 0,\n      activeSection: \"\",\n      form: \"\",\n      submitted: false\n    };\n  }\n\n  componentWillMount() {\n    let prevState = JSON.parse(sessionStorage.getItem(\"form\") || null);\n    const formType = this.props.computedMatch.params.type;\n\n    if (!prevState || formType !== prevState.form) {\n      if (this.props.registrationForm[formType]) {\n        this.setState(oldState => {\n          let formContents = JSON.parse(JSON.stringify(this.props.registrationForm[formType]));\n\n          let NewState = _objectSpread({}, oldState, {\n            activeSection: formContents.section_titles[0],\n            form: formType\n          });\n\n          let course = '';\n\n          if (this.props.computedMatch.params.course) {\n            course = decodeURIComponent(this.props.computedMatch.params.course);\n            course = this.props.courses.find(({\n              course_title\n            }) => course === course_title);\n\n            if (course) {\n              // convert it to a format that onselectChange can use\n              course = {\n                value: \"\".concat(course.course_id, \": \").concat(course.course_title),\n                label: \"\".concat(course.course_id, \": \").concat(course.course_title)\n              };\n            }\n          }\n\n          formContents.section_titles.forEach(title => {\n            // create blank fields based on form type\n            NewState[title] = {}; // set a value for every non-conditional field (object)\n\n            if (Array.isArray(formContents[title])) {\n              formContents[title].forEach(({\n                field,\n                type,\n                options\n              }) => {\n                switch (type) {\n                  case \"course\":\n                    NewState[title][field] = course;\n                    break;\n\n                  case \"select\":\n                    NewState[title][field] = options[0];\n                    break;\n\n                  case \"student\":\n                    NewState[title][field] = course;\n                    break;\n\n                  default:\n                    NewState[title][field] = null;\n                }\n              });\n            } // create validated state for each field\n\n\n            NewState[\"\".concat(title, \"_validated\")] = {};\n\n            if (Array.isArray(formContents[title])) {\n              formContents[title].forEach(field => {\n                NewState[\"\".concat(title, \"_validated\")][field.field] = true;\n              });\n            }\n          });\n          return NewState;\n        }, () => {\n          this.setState({\n            nextSection: this.validateSection()\n          });\n        });\n      }\n    } else {\n      this.setState(prevState);\n    }\n  }\n\n  getFormObject() {\n    return this.props.registrationForm[this.state.form];\n  }\n\n  getActiveSection() {\n    let section = this.getFormObject()[this.state.activeSection];\n\n    if (Array.isArray(section)) {\n      return section;\n    } else {\n      return section[this.state.conditional];\n    }\n  }\n\n  onBack() {\n    // clear session storage\n    sessionStorage.setItem(\"form\", \"\");\n  }\n\n  getStepContent(step, formType) {\n    return this.props.registrationForm[formType][step];\n  }\n\n  validateSection() {\n    const currSectionTitle = this.getFormObject().section_titles[this.state.activeStep];\n    return this.getActiveSection().filter(({\n      required\n    }) => required).every(({\n      field\n    }) => this.state[currSectionTitle][field]) && Object.values(this.state[\"\".concat(currSectionTitle, \"_validated\")]).every(valid => valid);\n  }\n\n  getConditionalFieldFromCurrentSection() {\n    let nextSectionInput = false;\n    let currSectionTitle = this.state.activeSection; // Get input from the conditional field\n\n    if (Array.isArray(this.getFormObject()[currSectionTitle])) {\n      this.getFormObject()[currSectionTitle].some(field => {\n        if (field.conditional) {\n          nextSectionInput = this.state[currSectionTitle][field.field];\n          return true;\n        } else {\n          return false;\n        }\n      });\n    }\n\n    return nextSectionInput;\n  } // Progresses to next section in registration form\n\n\n  handleNext() {\n    const currSectionTitle = this.getFormObject().section_titles[this.state.activeStep];\n    let section = this.props.registrationForm[this.state.form][this.state.activeSection];\n\n    if (!Array.isArray(section)) {\n      section = section[this.state.conditional];\n    }\n\n    section.forEach(field => {\n      this.validateField(currSectionTitle, field, this.state[currSectionTitle][field.field]);\n    });\n    this.setState(oldState => {\n      if (this.validateSection()) {\n        if (!oldState.submitted && oldState.activeStep === this.getFormObject().section_titles.length - 1) {\n          this.props.registrationActions.submitForm(this.state);\n          return {\n            submitted: true\n          };\n        } else {\n          const conditionalField = this.getConditionalFieldFromCurrentSection(),\n                nextActiveStep = oldState.activeStep + 1,\n                nextActiveSection = this.getFormObject().section_titles[nextActiveStep];\n          let newState = {\n            activeStep: nextActiveStep,\n            activeSection: nextActiveSection,\n            conditional: conditionalField ? conditionalField : oldState.conditional,\n            nextSection: false\n          };\n\n          if (conditionalField) {\n            let formContents = this.getFormObject(),\n                title = nextActiveSection; // create blank fields based on form type\n\n            newState[title] = {};\n            formContents[nextActiveSection][conditionalField].forEach(field => {\n              newState[title][field.field] = null;\n            }); // create validated state for each field\n\n            newState[\"\".concat(title, \"_validated\")] = {};\n            formContents[nextActiveSection][conditionalField].forEach(field => {\n              newState[\"\".concat(title, \"_validated\")][field.field] = true;\n            });\n          }\n\n          return newState;\n        }\n      } else {\n        return {};\n      }\n    }, () => {\n      this.setState({\n        nextSection: this.validateSection()\n      });\n    });\n  } // Regresses to previous section in registration form\n\n\n  handleBack() {\n    this.setState(oldState => {\n      if (oldState.activeStep !== 0 && oldState.activeSection) {\n        return {\n          activeStep: oldState.activeStep - 1,\n          activeSection: this.getFormObject().section_titles[oldState.activeStep - 1]\n        };\n      } else {\n        return {};\n      }\n    }, () => {\n      this.setState({\n        nextSection: this.validateSection()\n      });\n    });\n  }\n\n  handleReset() {\n    this.setState({\n      activeStep: 0\n    });\n  }\n\n  handleFieldUpdate(sectionTitle, field, fieldValue) {\n    this.setState(oldState => {\n      oldState[sectionTitle][field.field] = fieldValue;\n      return oldState;\n    });\n  }\n\n  validateField(sectionTitle, field, fieldValue) {\n    this.setState(oldState => {\n      if (!fieldValue) {\n        // if empty field\n        oldState[\"\".concat(sectionTitle, \"_validated\")][field.field] = !field.required;\n      } else if (InputValidation(fieldValue, field.type)) {\n        // if valid input\n        let isValid = true;\n\n        if (field.type === \"number\") {\n          // parse if number\n          oldState[sectionTitle][field.field] = parseInt(fieldValue, 10);\n        } else if (field.type === \"email\") {\n          let emails;\n\n          if (field.field === \"Student Email\") {\n            emails = this.props.students.map(({\n              email\n            }) => email);\n          } else if (field.field === \"Parent Email\") {\n            emails = this.props.parents.map(({\n              email\n            }) => email);\n          }\n\n          isValid = !emails.includes(fieldValue);\n        }\n\n        oldState[\"\".concat(sectionTitle, \"_validated\")][field.field] = isValid;\n      } else {\n        oldState[\"\".concat(sectionTitle, \"_validated\")][field.field] = false;\n      }\n\n      return oldState;\n    }, () => {\n      this.setState({\n        nextSection: this.validateSection()\n      }, () => {\n        sessionStorage.setItem(\"form\", JSON.stringify(this.state));\n      });\n    });\n  }\n\n  onSelectChange(value, label, field) {\n    this.setState(OldState => {\n      let NewState = OldState;\n      NewState[label][field.field] = value;\n      return NewState;\n    }, () => {\n      this.validateField(this.state.activeSection, field, value);\n    });\n  } // removes duplicates with arr1 from arr2 from search select field\n\n\n  removeDuplicates(arr1, arr2) {\n    let stringValue, stringOtherValue;\n    arr1.forEach(value => {\n      if (value) {\n        stringValue = value.value;\n      } else {\n        stringValue = '';\n      }\n\n      arr2.forEach((otherValue, j) => {\n        if (otherValue) {\n          stringOtherValue = otherValue.value;\n        } else {\n          stringOtherValue = '';\n        }\n\n        if (stringValue === stringOtherValue) {\n          arr2[j] = '1';\n        }\n      });\n    });\n    let uniqueVals = [...new Set(arr2)],\n        indexOfString = -1;\n    uniqueVals.forEach((value, i) => {\n      if (typeof value === \"string\") {\n        indexOfString = i;\n      }\n    });\n\n    if (indexOfString > -1) {\n      uniqueVals.splice(indexOfString, 1);\n    }\n\n    return uniqueVals;\n  }\n\n  renderField(field, label, fieldIndex) {\n    let fieldTitle = field.field,\n        currSelectedValues;\n\n    switch (field.type) {\n      case \"select\":\n        return React.createElement(FormControl, {\n          className: \"form-control\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 320\n          },\n          __self: this\n        }, React.createElement(InputLabel, {\n          htmlFor: fieldTitle,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 321\n          },\n          __self: this\n        }, fieldTitle), React.createElement(Select, {\n          value: this.state[label][fieldTitle],\n          onChange: ({\n            target\n          }) => {\n            this.onSelectChange(target.value, label, field);\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 322\n          },\n          __self: this\n        }, field.options.map(option => React.createElement(MenuItem, {\n          value: option,\n          key: option,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 329\n          },\n          __self: this\n        }, React.createElement(\"em\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 330\n          },\n          __self: this\n        }, option)))));\n\n      case \"course\":\n        const courseList = this.props.courses.filter(({\n          capacity,\n          filled\n        }) => capacity > filled).map(({\n          course_id,\n          course_title\n        }) => ({\n          value: \"\".concat(course_id, \": \").concat(course_title),\n          label: \"\".concat(course_id, \": \").concat(course_title)\n        }));\n        return React.createElement(SearchSelect, {\n          value: this.state[label][fieldTitle],\n          onChange: value => {\n            this.onSelectChange(value, label, field);\n          },\n          options: courseList,\n          className: \"search-options\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 343\n          },\n          __self: this\n        });\n\n      case \"student\":\n        if (this.state.conditional) {\n          currSelectedValues = Object.values(this.state[label]);\n        } else {\n          currSelectedValues = Object.values(this.state[label]);\n        }\n\n        let studentList = this.props.students.map(({\n          user_id,\n          name\n        }) => ({\n          value: \"\".concat(user_id, \": \").concat(name),\n          label: \"\".concat(user_id, \": \").concat(name)\n        }));\n        studentList.unshift({\n          value: \"\".concat(0, \": \", 'None'),\n          label: \"\".concat(0, \": \", 'None')\n        });\n        studentList = this.removeDuplicates(currSelectedValues, studentList);\n        return React.createElement(\"div\", {\n          style: {\n            width: \"inherit\"\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 368\n          },\n          __self: this\n        }, React.createElement(Grid, {\n          container: true,\n          className: \"student-align\",\n          spacing: 2000,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 369\n          },\n          __self: this\n        }, React.createElement(SearchSelect, {\n          value: this.state[label][fieldTitle] ? this.state[label][fieldTitle] : '',\n          onChange: value => {\n            this.onSelectChange(value, label, field);\n          },\n          options: studentList,\n          className: \"search-options\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 370\n          },\n          __self: this\n        }), this.state.conditional && fieldIndex <= 1 || fieldIndex === 0 ? '' : React.createElement(RemoveIcon, {\n          color: \"primary\",\n          \"aria-label\": \"Add\",\n          variant: \"extended\",\n          className: \"button-remove-student\",\n          onClick: event => {\n            event.preventDefault(); //deletes answer field from state\n\n            this.removeField(fieldIndex);\n            this.setState(prevState => {\n              return prevState;\n            });\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 379\n          },\n          __self: this\n        })));\n\n      case \"teacher\":\n        currSelectedValues = Object.values(this.state[label]);\n        let teacherList = this.props.teachers;\n        teacherList = teacherList.map(teacher => {\n          return {\n            value: teacher.id.toString() + \": \" + teacher.name,\n            label: teacher.id.toString() + \": \" + teacher.name\n          };\n        });\n        teacherList = this.removeDuplicates(currSelectedValues, teacherList);\n        return React.createElement(\"div\", {\n          style: {\n            width: \"inherit\"\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 404\n          },\n          __self: this\n        }, React.createElement(Grid, {\n          container: true,\n          className: \"student-align\",\n          spacing: 2000,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 405\n          },\n          __self: this\n        }, React.createElement(SearchSelect, {\n          value: this.state[label][fieldTitle] ? this.state[label][fieldTitle] : '',\n          onChange: value => {\n            this.onSelectChange(value, label, field);\n          },\n          options: teacherList,\n          className: \"search-options\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 406\n          },\n          __self: this\n        })));\n\n      default:\n        return React.createElement(TextField, {\n          label: field.field,\n          multiline: true // className={this.state[label+\"_validated\"][field.field] ? \"\": \"error\"}\n          ,\n          margin: \"normal\",\n          value: this.state[label][field.field],\n          error: !this.state[label + \"_validated\"][field.field],\n          helperText: !this.state[label + \"_validated\"][field.field] ? field.field + \" invalid\" : \"\",\n          type: field.type === \"int\" ? \"Number\" : \"text\",\n          required: field.required,\n          fullWidth: field.full,\n          onChange: e => {\n            e.preventDefault();\n            this.handleFieldUpdate.bind(this)(label, field, e.target.value);\n          },\n          onBlur: e => {\n            e.preventDefault();\n            this.validateField.bind(this)(label, field, e.target.value);\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 416\n          },\n          __self: this\n        });\n    }\n  }\n\n  addField(field, fieldIndex) {\n    const currentForm = this.getFormObject();\n    let param = [this.state.form, this.state.activeSection, fieldIndex];\n\n    if (!Array.isArray(currentForm[this.state.activeSection])) {\n      param.splice(2, 0, this.state.conditional);\n    }\n\n    this.props.registrationActions.addField(param);\n    sessionStorage.setItem(\"form\", JSON.stringify(this.state)); // for some reason it isn't rerendering automatically\n\n    this.forceUpdate();\n  }\n\n  removeField(fieldIndex) {\n    this.setState(prevState => {\n      // Delete field from state\n      let fieldtoDeleteKey;\n\n      if (Array.isArray(this.props.registrationForm[this.state.form][this.state.activeSection])) {\n        fieldtoDeleteKey = this.props.registrationForm[this.state.form][this.state.activeSection][fieldIndex].field;\n      } else {\n        fieldtoDeleteKey = this.props.registrationForm[this.state.form][this.state.activeSection][this.state.conditional][fieldIndex].field;\n      }\n\n      delete prevState[prevState[\"activeSection\"]][fieldtoDeleteKey];\n      delete prevState[prevState[\"activeSection\"] + \"_validated\"][fieldtoDeleteKey]; //rename all existing fields to be in the right order. currently there can be 2 student 3's\n\n      let currentSectionFields = prevState[prevState[\"activeSection\"]];\n      let currentSectionValidationFields = prevState[prevState[\"activeSection\"] + \"_validated\"];\n      let baseFieldName, curFieldName;\n\n      for (const _ref of Object.entries(Object.entries(currentSectionFields))) {\n        var _ref2 = _slicedToArray(_ref, 2);\n\n        const index = _ref2[0];\n\n        var _ref2$ = _slicedToArray(_ref2[1], 2);\n\n        const origFieldKey = _ref2$[0];\n        const field = _ref2$[1];\n\n        if (index === String(0)) {\n          baseFieldName = origFieldKey;\n          curFieldName = baseFieldName;\n        } else {\n          curFieldName = baseFieldName + \" \" + (index !== 0 ? index : '');\n        } // Rename Answer Fields\n\n\n        if (origFieldKey !== curFieldName) {\n          Object.defineProperty(currentSectionFields, curFieldName, Object.getOwnPropertyDescriptor(currentSectionFields, origFieldKey));\n          delete currentSectionFields[origFieldKey];\n        } // Rename Validation Fields\n\n\n        if (origFieldKey + \"_validated\" !== curFieldName + \"_validated\") {\n          Object.defineProperty(currentSectionValidationFields, curFieldName, Object.getOwnPropertyDescriptor(currentSectionValidationFields, origFieldKey));\n          delete currentSectionValidationFields[origFieldKey];\n        }\n      } //save to session Storage\n\n\n      sessionStorage.setItem(\"form\", JSON.stringify(this.state));\n      return prevState;\n    }, () => {\n      //delete field from redux store\n      let param = [this.state.form, this.state.activeSection];\n      this.props.registrationActions.removeField(param, fieldIndex, this.state.conditional);\n      this.forceUpdate();\n    });\n    this.forceUpdate();\n  }\n\n  renderForm() {\n    let _this$state = this.state,\n        activeSection = _this$state.activeSection,\n        activeStep = _this$state.activeStep,\n        conditional = _this$state.conditional,\n        nextSection = _this$state.nextSection,\n        currentForm = this.props.registrationForm[this.state.form],\n        steps = currentForm.section_titles;\n    let section = currentForm[activeSection];\n\n    if (!Array.isArray(section)) {\n      section = section[conditional];\n    }\n\n    return React.createElement(Stepper, {\n      activeStep: activeStep,\n      orientation: \"vertical\",\n      className: \"form-section\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 510\n      },\n      __self: this\n    }, steps.map(label => React.createElement(Step, {\n      key: label,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 513\n      },\n      __self: this\n    }, React.createElement(StepLabel, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 514\n      },\n      __self: this\n    }, label), React.createElement(StepContent, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 515\n      },\n      __self: this\n    }, section.map((field, j) => {\n      // number of fields of the same type as the current field\n      const numSameTypeFields = section.reduce((count, otherField) => field.name === otherField.name ? count + 1 : count, 0),\n            reversedSection = [...section].reverse(),\n            lastFieldOfType = reversedSection.find(otherField => otherField.name === field.name);\n      return React.createElement(\"div\", {\n        key: j,\n        className: \"fields-wrapper\",\n        style: {},\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 523\n        },\n        __self: this\n      }, React.createElement(Grid, {\n        container: true,\n        className: \"student-align\",\n        spacing: 20,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 524\n        },\n        __self: this\n      }, label === this.state.activeSection ? this.renderField(field, label, j) : ''), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 527\n        },\n        __self: this\n      }), numSameTypeFields < field.field_limit && field === lastFieldOfType && React.createElement(Fab, {\n        color: \"primary\",\n        \"aria-label\": \"Add\",\n        variant: \"extended\",\n        className: \"button add-student\",\n        onClick: event => {\n          event.preventDefault();\n          this.addField(field.field, j);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 531\n        },\n        __self: this\n      }, React.createElement(AddIcon, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 537\n        },\n        __self: this\n      }), \"Add \", field.field));\n    }), React.createElement(\"div\", {\n      className: \"controls\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 546\n      },\n      __self: this\n    }, React.createElement(Button, {\n      disabled: activeStep === 0,\n      color: \"secondary\",\n      onClick: event => {\n        event.preventDefault();\n        this.handleBack();\n      },\n      className: \"button \".concat(activeStep === 0 ? \"hide\" : \"\"),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 547\n      },\n      __self: this\n    }, \"Back\"), React.createElement(Button, {\n      variant: \"contained\",\n      color: \"primary\",\n      disabled: !nextSection,\n      onClick: event => {\n        event.preventDefault();\n        this.handleNext();\n      },\n      className: \"button\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 557\n      },\n      __self: this\n    }, activeStep === steps.length - 1 ? \"Finish\" : \"Next\"))))));\n  } // view after a submitted form\n\n\n  renderSubmitted() {\n    //TODO: find parent and student name of registered student\n    return React.createElement(\"div\", {\n      style: {\n        margin: 2 + \"%\",\n        height: 400 + \"px\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 581\n      },\n      __self: this\n    }, React.createElement(Typography, {\n      align: \"left\",\n      style: {\n        fontSize: 24 + 'px'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 582\n      },\n      __self: this\n    }, \"You have successfully registered!\"), React.createElement(Typography, {\n      align: \"left\",\n      style: {\n        fontSize: 14 + 'px'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 585\n      },\n      __self: this\n    }, \"An email will be sent to \\\"Parent Name\\\" to confirm \\\"Student Name\\\"'s registration\"));\n  }\n\n  render() {\n    return React.createElement(Grid, {\n      container: true,\n      className: \"\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 594\n      },\n      __self: this\n    }, React.createElement(Prompt, {\n      message: \"Are you sure you want to leave?\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 595\n      },\n      __self: this\n    }), React.createElement(Grid, {\n      item: true,\n      xs: 12,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 596\n      },\n      __self: this\n    }, React.createElement(Paper, {\n      className: \"registration-form\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 597\n      },\n      __self: this\n    }, React.createElement(BackButton, {\n      warn: true,\n      onBack: this.onBack,\n      alertMessage: \"Do you want to save your changes?\",\n      alertConfirmText: \"Yes, save changes\",\n      confirmAction: \"saveForm\",\n      alertDenyText: \"No, don't save changes\",\n      denyAction: \"default\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 598\n      },\n      __self: this\n    }), React.createElement(Typography, {\n      className: \"heading\",\n      align: \"left\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 607\n      },\n      __self: this\n    }, this.props.computedMatch.params.course ? \"\".concat(decodeURIComponent(this.props.computedMatch.params.course), \" \") : \"\", this.props.computedMatch.params.type, \" Registration\"), !this.state.submitted ? this.props.registrationForm[this.state.form] ? this.renderForm.bind(this)() : React.createElement(Typography, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 615\n      },\n      __self: this\n    }, \"Sorry! The form is unavailable.\") : this.renderSubmitted())));\n  }\n\n}\n\nfunction mapStateToProps(state) {\n  return {\n    courses: state.Course[\"CourseList\"],\n    courseCategories: state.Course[\"CourseCategories\"],\n    registrationForm: state.Registration[\"registration_form\"],\n    parents: state.Users[\"ParentList\"],\n    students: state.Users[\"StudentList\"],\n    teachers: state.Users[\"TeacherList\"]\n  };\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    registrationActions: bindActionCreators(registrationActions, dispatch)\n  };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Form);","map":{"version":3,"sources":["/Users/danielhuang/Desktop/front-end/omou-frontend/src/components/Form/Form.js"],"names":["connect","bindActionCreators","registrationActions","PropTypes","React","Component","TableRow","Prompt","Grid","Button","Paper","Typography","Stepper","Step","StepLabel","StepContent","TextField","InputValidation","Select","InputLabel","FormControl","MenuItem","Fab","AddIcon","RemoveIcon","SearchSelect","BackButton","Form","constructor","props","state","conditional","nextSection","activeStep","activeSection","form","submitted","componentWillMount","prevState","JSON","parse","sessionStorage","getItem","formType","computedMatch","params","type","registrationForm","setState","oldState","formContents","stringify","NewState","section_titles","course","decodeURIComponent","courses","find","course_title","value","course_id","label","forEach","title","Array","isArray","field","options","validateSection","getFormObject","getActiveSection","section","onBack","setItem","getStepContent","step","currSectionTitle","filter","required","every","Object","values","valid","getConditionalFieldFromCurrentSection","nextSectionInput","some","handleNext","validateField","length","submitForm","conditionalField","nextActiveStep","nextActiveSection","newState","handleBack","handleReset","handleFieldUpdate","sectionTitle","fieldValue","isValid","parseInt","emails","students","map","email","parents","includes","onSelectChange","OldState","removeDuplicates","arr1","arr2","stringValue","stringOtherValue","otherValue","j","uniqueVals","Set","indexOfString","i","splice","renderField","fieldIndex","fieldTitle","currSelectedValues","target","option","courseList","capacity","filled","studentList","user_id","name","unshift","width","event","preventDefault","removeField","teacherList","teachers","teacher","id","toString","full","e","bind","addField","currentForm","param","forceUpdate","fieldtoDeleteKey","currentSectionFields","currentSectionValidationFields","baseFieldName","curFieldName","entries","index","origFieldKey","String","defineProperty","getOwnPropertyDescriptor","renderForm","steps","numSameTypeFields","reduce","count","otherField","reversedSection","reverse","lastFieldOfType","field_limit","renderSubmitted","margin","height","fontSize","render","mapStateToProps","Course","courseCategories","Registration","Users","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\nimport * as registrationActions from '../../actions/registrationActions';\nimport PropTypes from 'prop-types';\nimport React, { Component } from 'react';\nimport TableRow from \"@material-ui/core/TableRow\";\nimport { Prompt } from 'react-router'\n\n//Material UI Imports\nimport Grid from \"@material-ui/core/Grid\";\nimport Button from \"@material-ui/core/Button\";\nimport Paper from \"@material-ui/core/Paper\";\nimport { Typography } from \"@material-ui/core\";\nimport Stepper from \"@material-ui/core/Stepper\";\nimport Step from \"@material-ui/core/Step\";\nimport StepLabel from \"@material-ui/core/StepLabel\";\nimport StepContent from \"@material-ui/core/StepContent\";\nimport TextField from \"@material-ui/core/TextField\";\nimport { InputValidation } from \"../FeatureViews/Registration/Validations\";\nimport Select from \"@material-ui/core/Select\";\nimport InputLabel from \"@material-ui/core/InputLabel\";\nimport FormControl from \"@material-ui/core/FormControl\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport Fab from \"@material-ui/core/Fab\";\nimport AddIcon from \"@material-ui/icons/Add\";\nimport RemoveIcon from \"@material-ui/icons/Clear\";\n\n//Outside React Component\nimport SearchSelect from 'react-select';\nimport BackButton from \"../BackButton.js\";\n\nclass Form extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            conditional: \"\",\n            nextSection: false,\n            activeStep: 0,\n            activeSection: \"\",\n            form: \"\",\n            submitted: false,\n        };\n    }\n\n    componentWillMount() {\n        let prevState = JSON.parse(sessionStorage.getItem(\"form\") || null);\n        const formType = this.props.computedMatch.params.type;\n        if (!prevState || formType !== prevState.form) {\n            if (this.props.registrationForm[formType]) {\n                this.setState((oldState) => {\n                    let formContents = JSON.parse(JSON.stringify(this.props.registrationForm[formType]));\n                    let NewState = {\n                        ...oldState,\n                        activeSection: formContents.section_titles[0],\n                        form: formType,\n                    };\n\n                    let course = '';\n                    if(this.props.computedMatch.params.course){\n                        course = decodeURIComponent(this.props.computedMatch.params.course);\n                        course = this.props.courses.find(({ course_title }) => course === course_title);\n                        if (course) {\n                            // convert it to a format that onselectChange can use\n                            course = {\n                                value: `${course.course_id}: ${course.course_title}`,\n                                label: `${course.course_id}: ${course.course_title}`,\n                            };\n                        }\n                    }\n                    formContents.section_titles.forEach((title) => {\n                        // create blank fields based on form type\n                        NewState[title] = {};\n                        // set a value for every non-conditional field (object)\n                        if (Array.isArray(formContents[title])) {\n                            formContents[title].forEach(({ field, type, options }) => {\n                                switch (type) {\n                                    case \"course\":\n                                        NewState[title][field] = course;\n                                        break;\n                                    case \"select\":\n                                        NewState[title][field] = options[0];\n                                        break;\n                                    case \"student\":\n                                        NewState[title][field] = course;\n                                        break;\n                                    default:\n                                        NewState[title][field] = null;\n                                }\n                            });\n                        }\n                        // create validated state for each field\n                        NewState[`${title}_validated`] = {};\n                        if (Array.isArray(formContents[title])) {\n                            formContents[title].forEach((field) => {\n                                NewState[`${title}_validated`][field.field] = true;\n                            });\n                        }\n                    });\n                    return NewState;\n                }, () => {\n                    this.setState({\n                        nextSection: this.validateSection(),\n                    });\n                });\n            }\n        } else {\n            this.setState(prevState);\n        }\n    }\n\n    getFormObject() {\n        return this.props.registrationForm[this.state.form];\n    }\n\n    getActiveSection() {\n        let section = this.getFormObject()[this.state.activeSection];\n        if (Array.isArray(section)) {\n            return section;\n        } else {\n            return section[this.state.conditional]\n        }\n    }\n\n    onBack() {\n        // clear session storage\n        sessionStorage.setItem(\"form\", \"\");\n    }\n\n    getStepContent(step, formType) {\n        return this.props.registrationForm[formType][step]\n    }\n\n    validateSection() {\n        const currSectionTitle = this.getFormObject().section_titles[this.state.activeStep];\n        return (\n            this.getActiveSection()\n                .filter(({ required }) => required)\n                .every(({ field }) => this.state[currSectionTitle][field]) &&\n            Object.values(this.state[`${currSectionTitle}_validated`])\n                .every((valid) => valid)\n        );\n    }\n\n    getConditionalFieldFromCurrentSection() {\n        let nextSectionInput = false;\n        let currSectionTitle = this.state.activeSection;\n        // Get input from the conditional field\n        if (Array.isArray(this.getFormObject()[currSectionTitle])) {\n            this.getFormObject()[currSectionTitle].some((field) => {\n                if (field.conditional) {\n                    nextSectionInput = this.state[currSectionTitle][field.field];\n                    return true;\n                } else {\n                    return false;\n                }\n            });\n        }\n        return nextSectionInput;\n    }\n\n    // Progresses to next section in registration form\n    handleNext() {\n        const currSectionTitle = this.getFormObject().section_titles[this.state.activeStep];\n        let section = this.props.registrationForm[this.state.form][this.state.activeSection];\n        if (!Array.isArray(section)) {\n            section = section[this.state.conditional];\n        }\n        section.forEach((field) => {\n            this.validateField(currSectionTitle, field, this.state[currSectionTitle][field.field]);\n        });\n        this.setState((oldState) => {\n            if (this.validateSection()) {\n                if (!oldState.submitted && oldState.activeStep === this.getFormObject().section_titles.length - 1) {\n                    this.props.registrationActions.submitForm(this.state);\n                    return {\n                        submitted: true,\n                    };\n                } else {\n                    const conditionalField = this.getConditionalFieldFromCurrentSection(),\n                        nextActiveStep = oldState.activeStep + 1,\n                        nextActiveSection = this.getFormObject().section_titles[nextActiveStep];\n                    let newState = {\n                        activeStep: nextActiveStep,\n                        activeSection: nextActiveSection,\n                        conditional: conditionalField ? conditionalField : oldState.conditional,\n                        nextSection: false,\n                    };\n                    if (conditionalField) {\n                        let formContents = this.getFormObject(),\n                            title = nextActiveSection;\n                        // create blank fields based on form type\n                        newState[title] = {};\n                        formContents[nextActiveSection][conditionalField].forEach((field) => {\n                            newState[title][field.field] = null;\n                        });\n                        // create validated state for each field\n                        newState[`${title}_validated`] = {};\n                        formContents[nextActiveSection][conditionalField].forEach((field) => {\n                            newState[`${title}_validated`][field.field] = true;\n                        });\n                    }\n                    return newState;\n                }\n            } else {\n                return {};\n            }\n        }, () => {\n            this.setState({\n                nextSection: this.validateSection(),\n            });\n        });\n    }\n\n    // Regresses to previous section in registration form\n    handleBack() {\n        this.setState((oldState) => {\n            if (oldState.activeStep !== 0 && oldState.activeSection) {\n                return {\n                    activeStep: oldState.activeStep - 1,\n                    activeSection: this.getFormObject().section_titles[oldState.activeStep - 1],\n                };\n            } else {\n                return {};\n            }\n        }, () => {\n            this.setState({\n                nextSection: this.validateSection(),\n            });\n        });\n    }\n\n    handleReset() {\n        this.setState({ activeStep: 0 });\n    }\n\n    handleFieldUpdate(sectionTitle, field, fieldValue) {\n        this.setState((oldState) => {\n            oldState[sectionTitle][field.field] = fieldValue;\n            return oldState;\n        });\n    }\n\n    validateField(sectionTitle, field, fieldValue) {\n        this.setState((oldState) => {\n            if (!fieldValue) { // if empty field\n                oldState[`${sectionTitle}_validated`][field.field] = !field.required;\n            } else if (InputValidation(fieldValue, field.type)) { // if valid input\n                let isValid = true;\n                if (field.type === \"number\") {\n                    // parse if number\n                    oldState[sectionTitle][field.field] = parseInt(fieldValue, 10);\n                } else if (field.type === \"email\") {\n                    let emails;\n                    if (field.field === \"Student Email\") {\n                        emails = this.props.students.map(({ email }) => email);\n                    } else if (field.field === \"Parent Email\") {\n                        emails = this.props.parents.map(({ email }) => email);\n                    }\n                    isValid = !emails.includes(fieldValue);\n                }\n                oldState[`${sectionTitle}_validated`][field.field] = isValid;\n            } else {\n                oldState[`${sectionTitle}_validated`][field.field] = false;\n            }\n            return oldState;\n        }, () => {\n            this.setState({\n                nextSection: this.validateSection(),\n            }, () => {\n                sessionStorage.setItem(\"form\", JSON.stringify(this.state));\n            });\n        });\n    }\n\n    onSelectChange(value, label, field) {\n        this.setState((OldState) => {\n            let NewState = OldState;\n            NewState[label][field.field] = value;\n            return NewState;\n        }, () => {\n            this.validateField(this.state.activeSection, field, value);\n        });\n    }\n    // removes duplicates with arr1 from arr2 from search select field\n    removeDuplicates(arr1, arr2){\n        let stringValue, stringOtherValue;\n        arr1.forEach((value)=>{\n            if(value){\n                stringValue = value.value;\n            } else {\n                stringValue = '';\n            }\n            arr2.forEach((otherValue, j)=>{\n                if(otherValue){\n                    stringOtherValue = otherValue.value;\n                } else {\n                    stringOtherValue = '';\n                }\n                if(stringValue === stringOtherValue){\n                    arr2[j] = '1';\n                }\n            });\n        });\n        let uniqueVals = [...new Set(arr2)], indexOfString = -1;\n        uniqueVals.forEach((value,i)=>{\n            if(typeof value === \"string\"){\n                indexOfString = i;\n            }\n        });\n        if(indexOfString > -1){\n            uniqueVals.splice(indexOfString,1);\n        }\n        return uniqueVals;\n    }\n\n    renderField(field, label, fieldIndex) {\n        let fieldTitle = field.field, currSelectedValues;\n        switch (field.type) {\n            case \"select\":\n                return <FormControl className={\"form-control\"}>\n                    <InputLabel htmlFor={fieldTitle}>{fieldTitle}</InputLabel>\n                    <Select\n                        value={this.state[label][fieldTitle]}\n                        onChange={({ target }) => {\n                            this.onSelectChange(target.value, label, field);\n                        }}>\n                        {\n                            field.options.map((option) => (\n                                <MenuItem value={option} key={option}>\n                                    <em>{option}</em>\n                                </MenuItem>\n                            ))\n                        }\n                    </Select>\n                </FormControl>;\n            case \"course\":\n                const courseList = this.props.courses\n                    .filter(({ capacity, filled }) => capacity > filled)\n                    .map(({ course_id, course_title }) => ({\n                        value: `${course_id}: ${course_title}`,\n                        label: `${course_id}: ${course_title}`,\n                    }));\n                return <SearchSelect\n                    value={this.state[label][fieldTitle]}\n                    onChange={(value) => {\n                        this.onSelectChange(value, label, field);\n                    }}\n                    options={courseList}\n                    className=\"search-options\" />;\n            case \"student\":\n                if(this.state.conditional){\n                    currSelectedValues = Object.values(this.state[label]);\n                } else {\n                    currSelectedValues = Object.values(this.state[label]);\n                }\n\n                let studentList = this.props.students\n                    .map(({ user_id, name }) => ({\n                        value: `${user_id}: ${name}`,\n                        label: `${user_id}: ${name}`,\n                        }));\n                studentList.unshift({\n                    value: `${0}: ${'None'}`,\n                    label: `${0}: ${'None'}`,\n                });\n                studentList = this.removeDuplicates(currSelectedValues,studentList);\n\n                return (<div style={{width:\"inherit\",}}>\n                     <Grid container className={\"student-align\"} spacing={2000}>\n                    <SearchSelect\n                        value={this.state[label][fieldTitle] ? this.state[label][fieldTitle] : ''}\n                        onChange={(value) => {\n                            this.onSelectChange(value, label, field);\n                        }}\n                        options={studentList}\n                        className=\"search-options\" />\n                         {\n                             ((this.state.conditional && fieldIndex <= 1) || (fieldIndex === 0)) ? '' :\n                                 <RemoveIcon color=\"primary\" aria-label=\"Add\" variant=\"extended\"\n                                             className=\"button-remove-student\"\n                                             onClick={(event) => {\n                                                 event.preventDefault();\n                                                 //deletes answer field from state\n                                                 this.removeField(fieldIndex);\n                                                 this.setState((prevState) => {\n                                                     return prevState;\n                                                 })\n                                             }}>\n                                 </RemoveIcon>\n                         }\n                    </Grid>\n                </div>);\n\n            case \"teacher\":\n                currSelectedValues = Object.values(this.state[label]);\n                let teacherList = this.props.teachers;\n                teacherList = teacherList.map((teacher) => {\n                    return {\n                        value: teacher.id.toString() + \": \" + teacher.name,\n                        label: teacher.id.toString() + \": \" + teacher.name,\n                    }\n                });\n                teacherList = this.removeDuplicates(currSelectedValues, teacherList);\n                return (<div style={{width:\"inherit\",}}>\n                    <Grid container className={\"student-align\"} spacing={2000}>\n                        <SearchSelect\n                            value={this.state[label][fieldTitle] ? this.state[label][fieldTitle] : ''}\n                            onChange={(value) => {\n                                this.onSelectChange(value, label, field);\n                            }}\n                            options={teacherList}\n                            className=\"search-options\" />\n                    </Grid>\n                </div>);\n            default:\n                return <TextField\n                    label={field.field}\n                    multiline\n                    // className={this.state[label+\"_validated\"][field.field] ? \"\": \"error\"}\n                    margin=\"normal\"\n                    value={this.state[label][field.field]}\n                    error={!this.state[label + \"_validated\"][field.field]}\n                    helperText={!this.state[label + \"_validated\"][field.field] ? field.field + \" invalid\" : \"\"}\n                    type={field.type === \"int\" ? \"Number\" : \"text\"}\n                    required={field.required}\n                    fullWidth={field.full}\n                    onChange={(e) => {\n                        e.preventDefault();\n                        this.handleFieldUpdate.bind(this)(label, field, e.target.value);\n                    }}\n                    onBlur={(e) => {\n                        e.preventDefault();\n                        this.validateField.bind(this)(label, field, e.target.value);\n                    }}\n                />\n        }\n    }\n\n    addField(field, fieldIndex) {\n        const currentForm = this.getFormObject();\n        let param = [this.state.form, this.state.activeSection, fieldIndex];\n        if (!Array.isArray(currentForm[this.state.activeSection])) {\n            param.splice(2, 0, this.state.conditional);\n        }\n        this.props.registrationActions.addField(param);\n        sessionStorage.setItem(\"form\", JSON.stringify(this.state));\n        // for some reason it isn't rerendering automatically\n        this.forceUpdate();\n    }\n\n    removeField(fieldIndex) {\n        this.setState((prevState)=>{\n            // Delete field from state\n            let fieldtoDeleteKey;\n            if(Array.isArray(this.props.registrationForm[this.state.form][this.state.activeSection])){\n                fieldtoDeleteKey = this.props.registrationForm[this.state.form][this.state.activeSection][fieldIndex].field;\n            } else {\n                fieldtoDeleteKey = this.props.registrationForm[this.state.form][this.state.activeSection][this.state.conditional][fieldIndex].field;\n            }\n            delete prevState[prevState[\"activeSection\"]][fieldtoDeleteKey];\n            delete prevState[prevState[\"activeSection\"]+\"_validated\"][fieldtoDeleteKey];\n\n            //rename all existing fields to be in the right order. currently there can be 2 student 3's\n            let currentSectionFields = prevState[prevState[\"activeSection\"]];\n            let currentSectionValidationFields = prevState[prevState[\"activeSection\"]+\"_validated\"];\n            let baseFieldName, curFieldName;\n\n            for (const [index, [origFieldKey, field]] of Object.entries(Object.entries(currentSectionFields))) {\n                if(index === String(0)){\n                    baseFieldName = origFieldKey;\n                    curFieldName = baseFieldName\n                } else {\n                    curFieldName = baseFieldName + \" \" + (index !== 0 ? index: '');\n                }\n                // Rename Answer Fields\n                if (origFieldKey !== curFieldName) {\n                    Object.defineProperty(currentSectionFields, curFieldName,\n                        Object.getOwnPropertyDescriptor(currentSectionFields, origFieldKey));\n                    delete currentSectionFields[origFieldKey];\n                }\n                // Rename Validation Fields\n                if(origFieldKey+\"_validated\" !== curFieldName+\"_validated\"){\n                    Object.defineProperty(currentSectionValidationFields, curFieldName,\n                        Object.getOwnPropertyDescriptor(currentSectionValidationFields, origFieldKey));\n                    delete currentSectionValidationFields[origFieldKey];\n                }\n            }\n\n            //save to session Storage\n            sessionStorage.setItem(\"form\", JSON.stringify(this.state));\n            return prevState;\n        }, ()=>{\n            //delete field from redux store\n            let param = [this.state.form, this.state.activeSection];\n            this.props.registrationActions.removeField(param, fieldIndex, this.state.conditional);\n            this.forceUpdate();\n        });\n        this.forceUpdate();\n    }\n\n    renderForm() {\n        let { activeSection, activeStep, conditional, nextSection } = this.state,\n            currentForm = this.props.registrationForm[this.state.form],\n            steps = currentForm.section_titles;\n        let section = currentForm[activeSection];\n        if (!Array.isArray(section)) {\n            section = section[conditional];\n        }\n        return (\n            <Stepper activeStep={activeStep} orientation=\"vertical\" className=\"form-section\">\n                {\n                    steps.map((label) => (\n                        <Step key={label}>\n                            <StepLabel>{label}</StepLabel>\n                            <StepContent>\n                                {\n                                    section.map((field, j) => {\n                                        // number of fields of the same type as the current field\n                                        const numSameTypeFields = section.reduce((count, otherField) => field.name === otherField.name ? count + 1 : count, 0),\n                                            reversedSection = [...section].reverse(),\n                                            lastFieldOfType = reversedSection.find((otherField) => otherField.name === field.name);\n                                        return (\n                                            <div key={j} className=\"fields-wrapper\" style={{}}>\n                                                <Grid container className={\"student-align\"} spacing={20}>\n                                                    {label === this.state.activeSection ? this.renderField(field, label, j): ''}\n                                                </Grid>\n                                                <br />\n                                                {\n                                                    numSameTypeFields < field.field_limit &&\n                                                    field === lastFieldOfType &&\n                                                    <Fab color=\"primary\" aria-label=\"Add\" variant=\"extended\"\n                                                        className=\"button add-student\"\n                                                        onClick={(event) => {\n                                                            event.preventDefault();\n                                                            this.addField(field.field, j);\n                                                        }}>\n                                                        <AddIcon />\n                                                        Add {field.field}\n                                                    </Fab>\n                                                }\n\n                                            </div>\n                                        );\n                                    })\n                                }\n                                <div className=\"controls\">\n                                    <Button\n                                        disabled={activeStep === 0}\n                                        color=\"secondary\"\n                                        onClick={(event) => {\n                                            event.preventDefault();\n                                            this.handleBack();\n                                        }}\n                                        className={`button ${activeStep === 0 ? \"hide\" : \"\"}`}>\n                                        Back\n                                    </Button>\n                                    <Button\n                                        variant=\"contained\"\n                                        color=\"primary\"\n                                        disabled={!nextSection}\n                                        onClick={(event) => {\n                                            event.preventDefault();\n                                            this.handleNext();\n                                        }}\n                                        className=\"button\">\n                                        {activeStep === steps.length - 1 ? \"Finish\" : \"Next\"}\n                                    </Button>\n                                </div>\n                            </StepContent>\n                        </Step>\n                    ))\n                }\n            </Stepper>\n        );\n    }\n\n    // view after a submitted form\n    renderSubmitted() {\n        //TODO: find parent and student name of registered student\n        return (\n            <div style={{margin:2+\"%\", height:400+\"px\"}}>\n                <Typography align={\"left\"} style={{fontSize:24+'px'}}>\n                    You have successfully registered!\n                </Typography>\n                <Typography align={\"left\"} style={{fontSize:14+'px'}}>\n                    An email will be sent to \"Parent Name\" to confirm \"Student Name\"'s registration\n                </Typography>\n            </div>\n        );\n    }\n\n    render() {\n        return (\n            <Grid container className=\"\">\n                <Prompt message=\"Are you sure you want to leave?\" />\n                <Grid item xs={12}>\n                    <Paper className={\"registration-form\"}>\n                        <BackButton\n                            warn={true}\n                            onBack={this.onBack}\n                            alertMessage={\"Do you want to save your changes?\"}\n                            alertConfirmText={\"Yes, save changes\"}\n                            confirmAction={\"saveForm\"}\n                            alertDenyText={\"No, don't save changes\"}\n                            denyAction={\"default\"}\n                        />\n                        <Typography className={\"heading\"} align={\"left\"}>\n                            {this.props.computedMatch.params.course ? `${decodeURIComponent(this.props.computedMatch.params.course)} ` : \"\"}\n                            {this.props.computedMatch.params.type} Registration\n                        </Typography>\n                        {\n                            !this.state.submitted ?\n                                this.props.registrationForm[this.state.form] ?\n                                    this.renderForm.bind(this)() :\n                                    <Typography>\n                                        Sorry! The form is unavailable.\n                                    </Typography>\n                                : this.renderSubmitted()\n                        }\n                    </Paper>\n                </Grid>\n            </Grid>\n        );\n    }\n}\n\nfunction mapStateToProps(state) {\n    return {\n        courses: state.Course[\"CourseList\"],\n        courseCategories: state.Course[\"CourseCategories\"],\n        registrationForm: state.Registration[\"registration_form\"],\n        parents: state.Users[\"ParentList\"],\n        students: state.Users[\"StudentList\"],\n        teachers: state.Users[\"TeacherList\"],\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        registrationActions: bindActionCreators(registrationActions, dispatch)\n    };\n}\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps,\n)(Form);"]},"metadata":{},"sourceType":"module"}