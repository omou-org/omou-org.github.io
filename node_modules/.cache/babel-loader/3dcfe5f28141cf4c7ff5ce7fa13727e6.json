{"ast":null,"code":"import _objectSpread from \"/Users/danielhuang/Desktop/front-end/omou-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport initialState from './initialState';\nimport * as actions from \"./../actions/actionTypes\";\nexport default function registration(state = initialState.RegistrationForms, {\n  payload,\n  type\n}) {\n  let newState;\n\n  switch (type) {\n    case actions.FETCH_COURSES:\n      console.log('FETCH_COURSES Action');\n      return payload;\n\n    case actions.FETCH_STUDENTS:\n      newState = payload;\n      console.log('RECEIVE_STUDENTS Action');\n      return newState;\n\n    case actions.GET_REGISTRATION_FORM:\n      newState = payload;\n      console.log('RECEIVE_REGISTRATION Action');\n      break;\n\n    case actions.ADD_STUDENT_FIELD:\n      newState = addAStudentField(state);\n      return newState;\n\n    case actions.ADD_COURSE_FIELD:\n      newState = addACourseField(state);\n      return newState;\n\n    case actions.ADD_FIELD:\n      newState = addField(state, payload);\n      return newState;\n\n    case actions.SUBMIT_FORM:\n      submitForm(payload);\n      return state;\n\n    case actions.REMOVE_FIELD:\n      let path = payload[0];\n      let removeFieldIndex = payload[1];\n      let conditional = payload[2];\n\n      if (conditional) {\n        path.push(conditional);\n      }\n\n      newState = removeField(state, path, removeFieldIndex, conditional);\n      return newState;\n\n    default:\n      return state;\n  }\n}\n\nfunction addAStudentField(prevState) {\n  let SmallGroupList = prevState.registration_form.tutoring[\"Student(s)\"][\"Small Group\"];\n\n  let NewStudentField = _objectSpread({}, SmallGroupList[0], {\n    field: \"Student \" + (SmallGroupList.length + 1).toString() + \" Name\",\n    required: false\n  });\n\n  SmallGroupList.push(NewStudentField);\n  prevState.registration_form.tutoring[\"Student(s)\"][\"Small Group\"] = SmallGroupList;\n  return prevState;\n}\n\nfunction addACourseField(prevState) {\n  let NewState = prevState;\n  let CourseFieldList = prevState.registration_form.course[\"Course Selection\"];\n\n  let NewCourseField = _objectSpread({}, CourseFieldList[0], {\n    field: \"Course \" + (CourseFieldList.length + 1).toString() + \" Name\",\n    required: false\n  });\n\n  CourseFieldList.push(NewCourseField);\n  NewState.registration_form.course[\"Course Selection\"] = CourseFieldList;\n  return NewState;\n}\n\nfunction addField(prevState, path) {\n  let NewState = prevState;\n  let fieldIndex = path.pop();\n  let SectionFieldList = getSectionFieldList(path, prevState.registration_form);\n  let fieldName = SectionFieldList[0].field;\n\n  let NewField = _objectSpread({}, SectionFieldList[fieldIndex], {\n    field: \"\".concat(fieldName, \" \").concat(SectionFieldList.length + 1),\n    required: false\n  });\n\n  SectionFieldList.push(NewField);\n  setSectionFieldList(path, SectionFieldList, prevState.registration_form); // console.log(SectionFieldList);\n\n  return NewState;\n}\n\nfunction removeField(prevState, path, fieldIndex, conditional) {\n  let NewState = prevState;\n  let SectionFieldList;\n\n  if (conditional) {\n    SectionFieldList = getSectionFieldList(JSON.parse(JSON.stringify(path)), prevState.registration_form);\n  } else {\n    SectionFieldList = getSectionFieldList(JSON.parse(JSON.stringify(path)), prevState.registration_form);\n  }\n\n  if (SectionFieldList.length > 0) {\n    SectionFieldList.splice(fieldIndex, 1);\n  }\n\n  let baseFieldName, curFieldName;\n  SectionFieldList = SectionFieldList.map((field, i) => {\n    if (i === 0) {\n      baseFieldName = field.field;\n      curFieldName = baseFieldName;\n    } else {\n      curFieldName = baseFieldName + \" \" + i;\n    }\n\n    return _objectSpread({}, field, {\n      field: curFieldName\n    });\n  });\n\n  if (conditional) {\n    NewState[\"registration_form\"][path[0]][path[1]][conditional] = SectionFieldList;\n  } else {\n    NewState[\"registration_form\"][path[0]][path[1]] = SectionFieldList;\n  }\n\n  return NewState;\n}\n\nfunction getSectionFieldList(path, formList) {\n  if (Array.isArray(path)) {\n    if (path.length === 0) {\n      return formList;\n    }\n\n    return getSectionFieldList(path, formList[path.shift()]);\n  }\n\n  Error(\"Path variable not an array\");\n}\n\nfunction setSectionFieldList(path, formList, form) {\n  if (Array.isArray(path)) {\n    if (path.length === 0) {\n      form = formList;\n      return;\n    }\n\n    let firstPathStep = path.shift();\n    return setSectionFieldList(path, formList, form[firstPathStep]);\n  }\n\n  Error(\"Path variable not an array\");\n}\n\nfunction submitForm(state) {\n  // submit information to database\n  console.log(\"Received state: \", state);\n}","map":{"version":3,"sources":["/Users/danielhuang/Desktop/front-end/omou-frontend/src/reducers/registrationReducer.js"],"names":["initialState","actions","registration","state","RegistrationForms","payload","type","newState","FETCH_COURSES","console","log","FETCH_STUDENTS","GET_REGISTRATION_FORM","ADD_STUDENT_FIELD","addAStudentField","ADD_COURSE_FIELD","addACourseField","ADD_FIELD","addField","SUBMIT_FORM","submitForm","REMOVE_FIELD","path","removeFieldIndex","conditional","push","removeField","prevState","SmallGroupList","registration_form","tutoring","NewStudentField","field","length","toString","required","NewState","CourseFieldList","course","NewCourseField","fieldIndex","pop","SectionFieldList","getSectionFieldList","fieldName","NewField","setSectionFieldList","JSON","parse","stringify","splice","baseFieldName","curFieldName","map","i","formList","Array","isArray","shift","Error","form","firstPathStep"],"mappings":"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","sourcesContent":["import initialState from './initialState';\nimport * as actions from \"./../actions/actionTypes\"\n\nexport default function registration(state = initialState.RegistrationForms, { payload, type }) {\n    let newState;\n    switch (type) {\n        case actions.FETCH_COURSES:\n            console.log('FETCH_COURSES Action');\n            return payload;\n        case actions.FETCH_STUDENTS:\n            newState = payload;\n            console.log('RECEIVE_STUDENTS Action');\n            return newState;\n        case actions.GET_REGISTRATION_FORM:\n            newState = payload;\n            console.log('RECEIVE_REGISTRATION Action');\n            break;\n        case actions.ADD_STUDENT_FIELD:\n            newState = addAStudentField(state);\n            return newState;\n        case actions.ADD_COURSE_FIELD:\n            newState = addACourseField(state);\n            return newState;\n        case actions.ADD_FIELD:\n            newState = addField(state, payload);\n            return newState;\n        case actions.SUBMIT_FORM:\n            submitForm(payload);\n            return state;\n        case actions.REMOVE_FIELD:\n            let path = payload[0];\n            let removeFieldIndex = payload[1];\n            let conditional = payload[2];\n            if(conditional){\n                path.push(conditional);\n            }\n            newState = removeField(state, path, removeFieldIndex, conditional);\n            return newState;\n        default:\n            return state;\n    }\n}\n\nfunction addAStudentField(prevState) {\n    let SmallGroupList = prevState.registration_form.tutoring[\"Student(s)\"][\"Small Group\"];\n    let NewStudentField = {\n        ...SmallGroupList[0],\n        field: \"Student \" + (SmallGroupList.length + 1).toString() + \" Name\",\n        required: false,\n    };\n    SmallGroupList.push(NewStudentField);\n    prevState.registration_form.tutoring[\"Student(s)\"][\"Small Group\"] = SmallGroupList;\n    return prevState;\n}\n\nfunction addACourseField(prevState) {\n    let NewState = prevState;\n    let CourseFieldList = prevState.registration_form.course[\"Course Selection\"];\n    let NewCourseField = {\n        ...CourseFieldList[0],\n        field: \"Course \" + (CourseFieldList.length + 1).toString() + \" Name\",\n        required: false,\n    }\n    CourseFieldList.push(NewCourseField);\n    NewState.registration_form.course[\"Course Selection\"] = CourseFieldList;\n    return NewState;\n}\n\nfunction addField(prevState, path) {\n    let NewState = prevState;\n    let fieldIndex = path.pop();\n    let SectionFieldList = getSectionFieldList(path, prevState.registration_form);\n    let fieldName = SectionFieldList[0].field;\n    let NewField = {\n        ...SectionFieldList[fieldIndex],\n        field: `${fieldName} ${(SectionFieldList.length+1)}`,\n        required: false,\n    };\n    SectionFieldList.push(NewField);\n    setSectionFieldList(path, SectionFieldList, prevState.registration_form);\n    // console.log(SectionFieldList);\n    return NewState;\n}\n\nfunction removeField(prevState, path, fieldIndex, conditional) {\n    let NewState = prevState;\n    let SectionFieldList;\n\n    if(conditional){\n        SectionFieldList = getSectionFieldList(JSON.parse(JSON.stringify(path)), prevState.registration_form)\n    } else {\n        SectionFieldList = getSectionFieldList(JSON.parse(JSON.stringify(path)), prevState.registration_form);\n    }\n\n    if(SectionFieldList.length>0){\n        SectionFieldList.splice(fieldIndex, 1);\n    }\n    let baseFieldName, curFieldName;\n    SectionFieldList = SectionFieldList.map((field,i)=>{\n       if(i === 0){\n           baseFieldName = field.field;\n           curFieldName = baseFieldName;\n       } else {\n           curFieldName = baseFieldName + \" \" +i;\n       }\n       return {...field, field:curFieldName};\n    });\n\n    if(conditional){\n        NewState[\"registration_form\"][path[0]][path[1]][conditional] = SectionFieldList;\n    } else {\n        NewState[\"registration_form\"][path[0]][path[1]] = SectionFieldList;\n    }\n    return NewState;\n}\n\nfunction getSectionFieldList(path, formList) {\n    if (Array.isArray(path)) {\n        if (path.length === 0) {\n            return formList;\n        }\n        return getSectionFieldList(path, formList[path.shift()])\n    }\n    Error(\"Path variable not an array\");\n}\n\nfunction setSectionFieldList(path, formList, form) {\n    if (Array.isArray(path)) {\n        if (path.length === 0) {\n            form = formList;\n            return;\n        }\n        let firstPathStep = path.shift();\n        return setSectionFieldList(path, formList, form[firstPathStep])\n    }\n    Error(\"Path variable not an array\");\n}\n\nfunction submitForm(state) {\n    // submit information to database\n    console.log(\"Received state: \", state);\n}\n"]},"metadata":{},"sourceType":"module"}